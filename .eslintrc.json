{
  "parserOptions": {
    "sourceType": "module",
    "ecmaVersion": "latest"
  },
  "extends": [
    "next/core-web-vitals",
    "next/typescript",
    "plugin:tailwindcss/recommended",
    "plugin:prettier/recommended"
  ],
  "plugins": ["unused-imports"],
  "rules": {
    //Import / export sorting
    "sort-imports": ["error"],

    // Handle unused stuff
    "no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error", // Automatically remove unused imports
    "unused-imports/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ], // Warn for all unused variables, with exceptions for those starting with an underscore
    "no-console": ["warn", { "allow": ["warn", "error"] }], // Enforce no use of `console` except for `warn` and `error` methods.

    // TypeScript Specific Rules
    "@typescript-eslint/no-explicit-any": "off", // Allow usage of "any" type in TypeScript
    "@typescript-eslint/no-unused-vars": "off", // Disable rule for unused variables in TypeScript
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"]
      },
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": true
        }
      },
      {
        "selector": "enum",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^E[A-Z]",
          "match": true
        }
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^T[A-Z]",
          "match": true
        }
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"]
      },
      {
        "selector": "import",
        "format": null
      },
      {
        "selector": "objectLiteralProperty",
        "format": null
      }
    ],

    // TailwindCSS Specific Rules
    "tailwindcss/no-unnecessary-arbitrary-value": "error", // Error on unnecessary arbitrary values in TailwindCSS
    "tailwindcss/enforces-shorthand": "error", // Enforce shorthand syntax in TailwindCSS
    "tailwindcss/classnames-order": "error", // Enforce ordered classnames in TailwindCSS
    "tailwindcss/no-custom-classname": ["off"], // Allow custom classnames not restricted to TailwindCSS

    // Enforce no "magic numbers" (unnamed numerical values) in the code.
    // Allows `0` and `1` to be exceptions (e.g., for array indexing or booleans), and ignores array index values.
    "no-magic-numbers": [
      "error",
      {
        "ignore": [0, 1], // Allow `0` and `1` to be used directly in code (common for loops or boolean values).
        "ignoreArrayIndexes": true // Allow array index values to be "magic numbers" (commonly used in loops).
      }
    ],
    "react/display-name": "off",
    "react/no-unescaped-entities": "off"
  }
}
